// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ClassBuilder.ClassData;
//
//    var nativeClass = NativeClass.FromJson(jsonString);

namespace ClassBuilder.ClassData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NativeClass
    {
        [JsonProperty("ClassName")]
        public string ClassName { get; set; }

        [JsonProperty("Extends")]
        public string Extends { get; set; }

        [JsonProperty("Fields")]
        public List<Field> Fields { get; set; }

        [JsonProperty("Functions")]
        public List<Function> Functions { get; set; }

        [JsonProperty("Virtuals")]
        public List<Virtual> Virtuals { get; set; }
    }

    public partial class Field
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Offset")]
        public string Offset { get; set; }

        [JsonProperty("Type")]
        public TypeClass Type { get; set; }
    }

    public partial class TypeClass
    {
        [JsonProperty("TypeName")]
        public string TypeName { get; set; }

        [JsonProperty("TypeSize")]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long TypeSize { get; set; }
    }

    public partial class Function
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Signature")]
        public string Signature { get; set; }

        [JsonProperty("Parameters")]
        public List<Parameter> Parameters { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Convention")]
        public string Convention { get; set; }

        [JsonProperty("Static", NullValueHandling = NullValueHandling.Ignore)]
        public bool Static { get; set; }
    }

    public partial class Parameter
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }
    }

    public partial class Virtual
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Offset")]
        public long Offset { get; set; }

        [JsonProperty("Parameters")]
        public List<Parameter> Parameters { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }
    }

    public partial class NativeClass
    {
        public static List<NativeClass> FromJson(string json) => JsonConvert.DeserializeObject<List<NativeClass>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<NativeClass> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodingChoiceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return integerValue;
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return l;
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value);
            return;
        }

        public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
    }
}
