// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ClassBuilder.ClassData;
//
//    var nativeClass = NativeClass.FromJson(jsonString);

namespace ClassBuilder.ClassData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NativeClass
    {
        [JsonProperty("ClassName", Required = Required.Always)]
        public string ClassName { get; set; }

        [JsonProperty("Extends", Required = Required.AllowNull)]
        public string Extends { get; set; }

        [JsonProperty("Fields", Required = Required.Always)]
        public List<Field> Fields { get; set; }

        [JsonProperty("Functions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Function> Functions { get; set; }

        [JsonProperty("Virtuals", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Virtual> Virtuals { get; set; }
    }

    public partial class Field
    {
        [JsonProperty("Name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("Offset", Required = Required.Always)]
        public string Offset { get; set; }

        [JsonProperty("Type", Required = Required.Always)]
        public TypeClass Type { get; set; }
    }

    public partial class TypeClass
    {
        [JsonProperty("TypeName", Required = Required.Always)]
        public string TypeName { get; set; }

        [JsonProperty("TypeSize", Required = Required.Always)]
        public long TypeSize { get; set; }
    }

    public partial class Function
    {
        [JsonProperty("Name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("Signature", Required = Required.Always)]
        public string Signature { get; set; }

        [JsonProperty("Parameters", Required = Required.Always)]
        public List<Parameter> Parameters { get; set; }

        [JsonProperty("Type", Required = Required.Always)]
        public string Type { get; set; }

        [JsonProperty("Convention", Required = Required.Always)]
        public string Convention { get; set; }
    }

    public partial class Parameter
    {
        [JsonProperty("Name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("Type", Required = Required.Always)]
        public string Type { get; set; }
    }

    public partial class Virtual
    {
        [JsonProperty("Name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("Offset", Required = Required.Always)]
        public long Offset { get; set; }

        [JsonProperty("Parameters", Required = Required.Always)]
        public List<Parameter> Parameters { get; set; }

        [JsonProperty("Type", Required = Required.Always)]
        public string Type { get; set; }
    }

    public partial class NativeClass
    {
        public static List<NativeClass> FromJson(string json) => JsonConvert.DeserializeObject<List<NativeClass>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<NativeClass> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
